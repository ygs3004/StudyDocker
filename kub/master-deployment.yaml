apiVersion: v1
kind: Service
metadata:
  name: backend
spec:
  selector:
    app: second-app
    tier: backend
  ports:
    - protocol: 'TCP'
      # 외부
      port: 80
      # 내부
      targetPort: 8080
  #    - protocol: 'TCP'
  #      port: 443
  #      targetPort: 443
  type: LoadBalancer


# deployment 에 의해 pod 생성
# service 객체는 pod 을 외부로 노출
# kubectl apply -f service.yaml

# '-' 3개로 구분 가능, 새로운 객체 시작
# 리소스는 위에서 아래로 시작
# service -> deployment 가 적절한 순서
# selector 에 맞는 리소스가 생기는 것을 감시중
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: second-app-deployment
# Deployment spec
spec:
  replicas: 1
  selector:
    matchLabels:
      app: second-app
      tier: backend
  template:
    # pod
    metadata:
      labels:
        # custom key value
        app: second-app
        tier: backend
    # pod spec
    spec:
      containers:
        # container list
        - name:  second-node
          image: ygs3004/kub-first-app:2
      # - name:
      #  image:

# yaml 파일 이용
# kubectl apply -f=deployment.yaml

# 선언형 리소스 제거
# kubectl delete -f=${file-name}